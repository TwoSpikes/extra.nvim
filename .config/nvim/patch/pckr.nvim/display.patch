--- .local/share/nvim/pckr/pckr.nvim/lua/pckr/display.lua	2025-01-12 14:25:02.524781266 +0300
+++ .local/share/nvim/pckr/pckr.nvim/lua/pckr/display.lua	2024-12-30 00:36:26.294044579 +0300
@@ -145,6 +145,9 @@
   if not buf then
     return
   end
+  if vim.fn.bufwinnr(buf) == -1 then
+    return
+  end
   text = assert(normalize_lines(text))
   vim.bo[buf].modifiable = true
   api.nvim_buf_set_lines(buf, srow, erow, true, text)
@@ -262,6 +265,9 @@
     return
   end
 
+  if vim.fn.bufwinnr(self.buf) == -1 then
+    return
+  end
   local info = api.nvim_buf_get_extmark_by_id(self.buf, ns, mark, { details = true })
 
   --- @type integer, integer?
@@ -307,6 +313,12 @@
 --- @param message {[1]: string, [2]:string?}[][]
 --- @param pos? Pckr.TaskPos
 function Display:update_task_lines(plugin, message, pos)
+  if not self.buf then
+    return
+  end
+  if vim.fn.bufwinnr(self.buf) == -1 then
+    return
+  end
   local item = self.items[plugin]
 
   -- If pos is given, task will be rendered at the top or bottom of the buffer.
@@ -320,7 +332,10 @@
     item.mark = api.nvim_buf_set_extmark(self.buf, ns, new_row, 0, {})
   end
 
-  local srow, erow = assert(self:get_task_region(plugin))
+  local srow, erow = self:get_task_region(plugin)
+  if srow == nil or erow == nil then
+    return
+  end
 
   local lines = {} --- @type string[]
   for _, l in ipairs(message) do
@@ -618,6 +633,9 @@
   if not disp.buf then
     return
   end
+  if vim.fn.bufwinnr(disp.buf) == -1 then
+    return
+  end
   local headline = api.nvim_buf_get_lines(disp.buf, 0, 1, false)[1]
   local count_start, count_end = headline:find('%d+')
   if count_start then
@@ -725,6 +743,9 @@
   if not self.buf then
     return
   end
+  if vim.fn.bufwinnr(self.buf) == -1 then
+    return
+  end
   --- @type string
   local headline = TITLE .. ' - ' .. message
   local width = api.nvim_win_get_width(self.win) - 2
