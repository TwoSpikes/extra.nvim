--- .local/share/nvim/lazy/lazy.nvim/lua/lazy/manage/task/git.lua	2025-02-16 17:21:28.837421699 +0300
+++ .local/share/nvim/lazy/lazy.nvim/lua/lazy/manage/task/git.lua	2025-02-16 17:23:16.777421657 +0300
@@ -272,6 +272,14 @@
   end,
 }
 
+local function get_build_file(plugin)
+  for _, path in ipairs({ "build.lua", "build/init.lua" }) do
+    if Util.file_exists(plugin.dir .. "/" .. path) then
+      return path
+    end
+  end
+end
+
 -- fetches all needed origin branches
 M.fetch = {
   skip = function(plugin)
@@ -280,6 +288,39 @@
 
   ---@async
   run = function(self)
+    vim.cmd([[silent! runtime plugin/rplugin.vim]])
+
+    local builders = self.plugin.unbuild
+
+    -- Skip if `build` is set to `false`
+    if builders == false then
+      return
+    end
+
+    builders = builders or get_build_file(self.plugin)
+
+    if builders then
+      builders = type(builders) == "table" and builders or { builders }
+      ---@cast builders (string|fun(LazyPlugin))[]
+      for _, build in ipairs(builders) do
+        if type(build) == "function" then
+          build(self.plugin)
+        elseif build == "rockspec" then
+          Rocks.build(self)
+        elseif build:sub(1, 1) == ":" then
+          B.cmd(self, build)
+        elseif build:match("%.lua$") then
+          local file = self.plugin.dir .. "/" .. build
+          local chunk, err = loadfile(file)
+          if not chunk or err then
+            error(err)
+          end
+          chunk()
+        else
+          B.shell(self, build)
+        end
+      end
+    end
     throttle.wait()
     local args = {
       "fetch",
