--- .local/share/nvim/lazy/lazy.nvim/lua/lazy/manage/task/git.lua	2025-03-03 09:20:29.900542069 +0300
+++ .local/share/nvim/lazy/lazy.nvim/lua/lazy/manage/task/git.lua	2025-03-03 09:54:18.923778259 +0300
@@ -22,6 +22,29 @@
   end
 end
 
+local function get_build_file(plugin)
+  for _, path in ipairs({ "build.lua", "build/init.lua" }) do
+    if Util.file_exists(plugin.dir .. "/" .. path) then
+      return path
+    end
+  end
+end
+function cmd(task, build)
+  if task.plugin.build ~= "rockspec" then
+    Loader.load(task.plugin, { task = "build" })
+  end
+  local cmd = vim.api.nvim_parse_cmd(build:sub(2), {}) --[[@as vim.api.keyset.cmd]]
+  task:log(vim.api.nvim_cmd(cmd, { output = true }))
+end
+function shell(task, build)
+  local shell = vim.env.SHELL or vim.o.shell
+  local shell_args = shell:find("cmd.exe", 1, true) and "/c" or "-c"
+
+  task:spawn(shell, {
+    args = { shell_args, build },
+    cwd = task.plugin.dir,
+  })
+end
 function throttle.wait()
   if not Config.options.git.throttle.enabled then
     return
@@ -280,6 +303,40 @@
 
   ---@async
   run = function(self)
+    vim.g.already_patched = nil
+    vim.cmd([[silent! runtime plugin/rplugin.vim]])
+
+    local builders = self.plugin.unpatch
+
+    -- Skip if `build` is set to `false`
+    if builders == false then
+      return
+    end
+
+    builders = builders or get_build_file(self.plugin)
+
+    if builders then
+      builders = type(builders) == "table" and builders or { builders }
+      ---@cast builders (string|fun(LazyPlugin))[]
+      for _, build in ipairs(builders) do
+        if type(build) == "function" then
+          build(self.plugin)
+        elseif build == "rockspec" then
+          Rocks.build(self)
+        elseif build:sub(1, 1) == ":" then
+          cmd(self, build)
+        elseif build:match("%.lua$") then
+          local file = self.plugin.dir .. "/" .. build
+          local chunk, err = loadfile(file)
+          if not chunk or err then
+            error(err)
+          end
+          chunk()
+        else
+          shell(self, build)
+        end
+      end
+    end
     throttle.wait()
     local args = {
       "fetch",
@@ -299,6 +356,42 @@
       on_exit = function(ok)
         if ok then
           self.plugin._.last_check = vim.uv.now()
+    vim.defer_fn(function()
+      vim.cmd([[silent! runtime plugin/rplugin.vim]])
+
+      local builders = self.plugin.patch
+
+      -- Skip if `build` is set to `false`
+      if builders == false then
+        return
+      end
+
+      builders = builders or get_build_file(self.plugin)
+
+      if builders then
+        vim.g.already_patched = true
+        builders = type(builders) == "table" and builders or { builders }
+        ---@cast builders (string|fun(LazyPlugin))[]
+        for _, build in ipairs(builders) do
+          if type(build) == "function" then
+            build(self.plugin)
+          elseif build == "rockspec" then
+            Rocks.build(self)
+          elseif build:sub(1, 1) == ":" then
+            cmd(self, build)
+          elseif build:match("%.lua$") then
+            local file = self.plugin.dir .. "/" .. build
+            local chunk, err = loadfile(file)
+            if not chunk or err then
+              error(err)
+            end
+            chunk()
+          else
+            shell(self, build)
+          end
+        end
+      end
+    end, 0)
         end
       end,
     })
